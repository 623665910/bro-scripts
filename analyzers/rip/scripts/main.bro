##! Implements base functionality for RIP analysis.
##! Generates the Rip.log file.

# Generated by binpac_quickstart

module Rip;

export {
	redef enum Log::ID += { LOG };

	type Info: record {
		## Timestamp for when the event happened.
		ts:     time    &log;
		## Unique ID for the connection.
		uid:    string  &log;
		## The connection's 4-tuple of endpoint addresses/ports.
		id:     conn_id &log;
                ## Type of request
                command: string  &log;
                ## Type of update
                update:    string  &log;
                ## Version of protocol
                version: count &log;
	};

	## Event that can be handled to access the RIP record as it is sent on
	## to the loggin framework.
	global log_rip: event(rec: Info);
}

# TODO: The recommended method to do dynamic protocol detection
# (DPD) is with the signatures in dpd.sig. If you can't come up
# with any signatures, then you can do port-based detection by
# uncommenting the following and specifying the port(s):

const ports = { 520/udp };
redef likely_server_ports += { ports };

event bro_init() &priority=5
	{
	Log::create_stream(Rip::LOG, [$columns=Info, $ev=log_rip, $path="rip"]);

	# TODO: If you're using port-based DPD, uncomment this.
	Analyzer::register_for_ports(Analyzer::ANALYZER_RIP, ports);
	}

event rip_request(c: connection, command: count, version: count) &priority=-5
        {
        local info: Info;
        local solicitation: count;
        info$ts       = network_time();
        info$uid      = c$uid;
        info$id       = c$id;
        info$version  = version;
        info$command  = command_types[command];
        if ( c$id$orig_p == c$id$resp_p )
                solicitation = 1;
        else
                solicitation = 2;
        info$update  = update_types[solicitation];
        Log::write(RIP::LOG, info);
        }

event rip_response(c: connection, command: count, version: count) &priority=-5
        {
        local info: Info;
        local solicitation: count;
        info$ts  = network_time();
        info$uid = c$uid;
        info$id  = c$id;
        info$command  = command_types[command];
        info$version  = version;

        if ( c$id$orig_p == c$id$resp_p )
                solicitation = 1;
        else
                solicitation = 2;
        info$update  = update_types[solicitation];
        Log::write(RIP::LOG, info);
        }
